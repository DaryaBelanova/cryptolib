#ifndef CRYPTOLIB_OFBTEST_H
#define CRYPTOLIB_OFBTEST_H

#include "../../ReferenceImplementations/ciphermodes/OFB.h"
#include "../../ReferenceImplementations/ciphersuite/Kuznyechik.h"
#include "../../ReferenceImplementations/ciphersuite/Magma.h"

class OFBTest {

public:

    OFBTest();

    void assert_encrypt128();

    void assert_encrypt_step_by_step128();

    void assert_decrypt128();

    void assert_encrypt64();

    void assert_encrypt_step_by_step64();

    void assert_decrypt64();

    void assert_all_functions();

private:

    Kuznyechik alg128_;
    Magma alg64_;
    OFB<Kuznyechik> ofb128_;
    OFB<Magma> ofb64_;

    // 128-bit blocks
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size * 2> key128_ = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

    inline static const std::vector<uint8_t> iv128_ = { 0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0xa1,0xb2,0xc3,0xd4,0xe5,0xf0,
        0x01,0x12,0x23,0x34,0x45,0x56,0x67,0x78,0x89,0x90,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19 };

    inline static const std::vector<uint8_t> plain_flow128_ = {
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88,
            0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,
            0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks128_ = { {
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88},
        {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a},
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00},
        {0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11}
    } };

    inline static const std::vector<std::array<uint8_t, Kuznyechik::byte_block_size>> input_gamma_blocks128_ = { {
        {0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0xa1,0xb2,0xc3,0xd4,0xe5,0xf0,0x01,0x12},
        {0x23,0x34,0x45,0x56,0x67,0x78,0x89,0x90,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19},
        {0x90,0xa2,0x39,0x1d,0xe4,0xe2,0x5c,0x24,0x00,0xf1,0xa4,0x92,0x32,0xd0,0x24,0x1d},
        {0xed,0x4a,0x65,0x94,0x40,0xd9,0x9c,0xc3,0x07,0x2c,0x8b,0x8d,0x51,0x7d,0xd9,0xb5}
    } };

    inline static const std::vector < std::array<uint8_t, Kuznyechik::byte_block_size>> output_gamma_blocks128_ = { {
        {0x90,0xa2,0x39,0x1d,0xe4,0xe2,0x5c,0x24,0x00,0xf1,0xa4,0x92,0x32,0xd0,0x24,0x1d},
        {0xed,0x4a,0x65,0x94,0x40,0xd9,0x9c,0xc3,0x07,0x2c,0x8b,0x8d,0x51,0x7d,0xd9,0xb5},
        {0x77,0x80,0x64,0xe8,0x69,0xc6,0xcf,0x39,0x51,0xa5,0x5c,0x30,0xfe,0xd7,0x80,0x13},
        {0x02,0x0d,0xff,0x95,0x00,0x64,0x0e,0xf9,0x0a,0x92,0xee,0xad,0x09,0x9a,0x31,0x41}
    } };

    inline static const std::vector<uint8_t> cipher_flow128_ = {
            0x81,0x80,0x0a,0x59,0xb1,0x84,0x2b,0x24,0xff,0x1f,0x79,0x5e,0x89,0x7a,0xbd,0x95,
            0xed,0x5b,0x47,0xa7,0x04,0x8c,0xfa,0xb4,0x8f,0xb5,0x21,0x36,0x9d,0x93,0x26,0xbf,
            0x66,0xa2,0x57,0xac,0x3c,0xa0,0xb8,0xb1,0xc8,0x0f,0xe7,0xfc,0x10,0x28,0x8a,0x13,
            0x20,0x3e,0xbb,0xc0,0x66,0x13,0x86,0x60,0xa0,0x29,0x22,0x43,0xf6,0x90,0x31,0x50
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks128_ = { {
        {0x81,0x80,0x0a,0x59,0xb1,0x84,0x2b,0x24,0xff,0x1f,0x79,0x5e,0x89,0x7a,0xbd,0x95},
        {0xed,0x5b,0x47,0xa7,0x04,0x8c,0xfa,0xb4,0x8f,0xb5,0x21,0x36,0x9d,0x93,0x26,0xbf},
        {0x66,0xa2,0x57,0xac,0x3c,0xa0,0xb8,0xb1,0xc8,0x0f,0xe7,0xfc,0x10,0x28,0x8a,0x13},
        {0x20,0x3e,0xbb,0xc0,0x66,0x13,0x86,0x60,0xa0,0x29,0x22,0x43,0xf6,0x90,0x31,0x50}
    } };


    // 64-bit blocks
    static constexpr std::array<uint8_t, Magma::byte_block_size * 4> key64_ = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0xf0,
                                  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

    inline static const std::vector<uint8_t> iv64_ = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef,0x23,0x45,0x67,0x89,0x0a,0xbc,0xde,0xf1 };

    inline static const std::vector<uint8_t> plain_flow64_ = {
            0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59,
            0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20,
            0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c,
            0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks64_ = { {
        {0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59},
        {0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20},
        {0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c},
        {0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41}
    } };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> input_gamma_blocks64_ = {
        {0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef},
        {0x23,0x45,0x67,0x89,0x0a,0xbc,0xde,0xf1},
        {0x49,0xe9,0x10,0x89,0x5a,0x83,0x36,0xda},
        {0xd6,0x12,0xa3,0x48,0xe7,0x82,0x95,0xbc}
    };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> output_gamma_blocks64_ = {
        {0x49,0xe9,0x10,0x89,0x5a,0x83,0x36,0xda},
        {0xd6,0x12,0xa3,0x48,0xe7,0x82,0x95,0xbc},
        {0xea,0x60,0xcb,0x4c,0x24,0xa6,0x30,0x32},
        {0x41,0x36,0xaf,0x23,0xaa,0xfa,0xa5,0x44}
    };

    inline static const std::vector<uint8_t> cipher_flow64_ = {
            0xdb,0x37,0xe0,0xe2,0x66,0x90,0x3c,0x83,
            0x0d,0x46,0x64,0x4c,0x1f,0x9a,0x08,0x9c,
            0xa0,0xf8,0x30,0x62,0x43,0x0e,0x32,0x7e,
            0xc8,0x24,0xef,0xb8,0xbd,0x4f,0xdb,0x05
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks64_ = {
        {0xdb,0x37,0xe0,0xe2,0x66,0x90,0x3c,0x83},
        {0x0d,0x46,0x64,0x4c,0x1f,0x9a,0x08,0x9c},
        {0xa0,0xf8,0x30,0x62,0x43,0x0e,0x32,0x7e},
        {0xc8,0x24,0xef,0xb8,0xbd,0x4f,0xdb,0x05}
    };
};

#endif CRYPTOLIB_OFBTEST_H