#ifndef CRYPTOLIB_CBCTEST_H
#define CRYPTOLIB_CBCTEST_H

#include "../../ReferenceImplementations/ciphermodes/CBC.h"
#include "../../ReferenceImplementations/ciphersuite/Kuznyechik.h"
#include "../../ReferenceImplementations/ciphersuite/Magma.h"

class CBCTest {

public:

    CBCTest();

    void assert_encrypt128();

    void assert_encrypt_step_by_step128();

    void assert_decrypt128();

    void assert_encrypt64();

    void assert_encrypt_step_by_step64();

    void assert_decrypt64();

    void assert_all_functions();

private:

    Kuznyechik alg128_;
    Magma alg64_;
    CBC<Kuznyechik> cbc128_;
    CBC<Magma> cbc64_;

    // 128-bit blocks
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size * 2> key128_ = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

    inline static const std::vector<uint8_t> iv128_ = { 0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0xa1,0xb2,0xc3,0xd4,0xe5,0xf0,
        0x01,0x12,0x23,0x34,0x45,0x56,0x67,0x78,0x89,0x90,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19 };

    inline static const std::vector<uint8_t> plain_flow128_ = {
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88,
            0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,
            0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks128_ = { {
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88},
        {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a},
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00},
        {0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11}
    } };

    inline static const std::vector<std::array<uint8_t, Kuznyechik::byte_block_size>> input_blocks128_ = { {
        {0x03,0x16,0x65,0x3c,0xc5,0xcd,0xb9,0xf0,0x5e,0x5c,0x1e,0x18,0x5e,0x5a,0x98,0x9a},
        {0x23,0x25,0x67,0x65,0x23,0x2d,0xef,0xe7,0x9a,0x8a,0xbe,0xae,0xda,0xf9,0xe7,0x13},
        {0x79,0xbb,0x41,0x90,0xf5,0xe3,0x8d,0xc5,0x09,0x4f,0x95,0xf1,0x83,0x82,0xc6,0x27},
        {0x0a,0x15,0xa2,0x34,0xd2,0x0f,0x64,0x3f,0x05,0xa5,0x42,0xaa,0x72,0x54,0xa5,0xbd}
    } };

    inline static const std::vector<uint8_t> cipher_flow128_ = {
            0x68,0x99,0x72,0xd4,0xa0,0x85,0xfa,0x4d,0x90,0xe5,0x2e,0x3d,0x6d,0x7d,0xcc,0x27,
            0x28,0x26,0xe6,0x61,0xb4,0x78,0xec,0xa6,0xaf,0x1e,0x8e,0x44,0x8d,0x5e,0xa5,0xac,
            0xfe,0x7b,0xab,0xf1,0xe9,0x19,0x99,0xe8,0x56,0x40,0xe8,0xb0,0xf4,0x9d,0x90,0xd0,
            0x16,0x76,0x88,0x06,0x5a,0x89,0x5c,0x63,0x1a,0x2d,0x9a,0x15,0x60,0xb6,0x39,0x70
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks128_ = { { // also output_gamma_blocks
        {0x68,0x99,0x72,0xd4,0xa0,0x85,0xfa,0x4d,0x90,0xe5,0x2e,0x3d,0x6d,0x7d,0xcc,0x27},
        {0x28,0x26,0xe6,0x61,0xb4,0x78,0xec,0xa6,0xaf,0x1e,0x8e,0x44,0x8d,0x5e,0xa5,0xac},
        {0xfe,0x7b,0xab,0xf1,0xe9,0x19,0x99,0xe8,0x56,0x40,0xe8,0xb0,0xf4,0x9d,0x90,0xd0},
        {0x16,0x76,0x88,0x06,0x5a,0x89,0x5c,0x63,0x1a,0x2d,0x9a,0x15,0x60,0xb6,0x39,0x70}
    } };


    // 64-bit blocks
    static constexpr std::array<uint8_t, Magma::byte_block_size * 4> key64_ = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0xf0,
                                  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

    inline static const std::vector<uint8_t> iv64_ = { 0x12,0x34,0x56,0x78,0x90,0xab,0xcd,0xef,0x23,0x45,0x67,0x89,0x0a,0xbc,0xde,0xf1,0x34,0x56,0x78,0x90,0xab,0xcd,0xef,0x12 };

    inline static const std::vector<uint8_t> plain_flow64_ = {
            0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59,
            0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20,
            0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c,
            0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks64_ = { {
        {0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59},
        {0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20},
        {0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c},
        {0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41}
    } };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> input_blocks64_ = {
        {0x80,0xea,0xa6,0x13,0xac,0xb8,0xc7,0xb6},
        {0xf8,0x11,0xa0,0x8d,0xf2,0xa4,0x43,0xd1},
        {0x7e,0xce,0x83,0xbe,0xcc,0x65,0xed,0x5e},
        {0x1f,0xc3,0xf0,0xc5,0xfd,0xdd,0x47,0x58}
    };

    inline static const std::vector<uint8_t> cipher_flow64_ = {
            0x96,0xd1,0xb0,0x5e,0xea,0x68,0x39,0x19,
            0xaf,0xf7,0x61,0x29,0xab,0xb9,0x37,0xb9,
            0x50,0x58,0xb4,0xa1,0xc4,0xbc,0x00,0x19,
            0x20,0xb7,0x8b,0x1a,0x7c,0xd7,0xe6,0x67
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks64_ = { // also output_gamma_blocks
        {0x96,0xd1,0xb0,0x5e,0xea,0x68,0x39,0x19},
        {0xaf,0xf7,0x61,0x29,0xab,0xb9,0x37,0xb9},
        {0x50,0x58,0xb4,0xa1,0xc4,0xbc,0x00,0x19},
        {0x20,0xb7,0x8b,0x1a,0x7c,0xd7,0xe6,0x67}
    };
};

#endif CRYPTOLIB_CBCTEST_H