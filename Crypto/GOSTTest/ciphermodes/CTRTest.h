#ifndef CRYPTOLIB_CTRTEST_H
#define CRYPTOLIB_CTRTEST_H

#include "../../ReferenceImplementations/ciphermodes/CTR.h"
#include "../../ReferenceImplementations/ciphersuite/Kuznyechik.h"
#include "../../ReferenceImplementations/ciphersuite/Magma.h"

class CTRTest {

public:

    CTRTest();

    void assert_encrypt128();

    void assert_encrypt_step_by_step128();

    void assert_decrypt128();

    void assert_encrypt64();

    void assert_encrypt_step_by_step64();

    void assert_decrypt64();

    void assert_all_functions();

private:

    Kuznyechik alg128_;
    Magma alg64_;

    CTR<Kuznyechik> ctr128_;
    CTR<Magma> ctr64_;

    // 128-bit blocks
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size * 2> key128_ = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

    inline static const std::vector<uint8_t> iv128_ = { 0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0 };

    inline static const std::vector<uint8_t> plain_flow128_ = {
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88,
            0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,
            0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks128_ = { {
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88},
        {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a},
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00},
        {0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11}
    } };

    inline static const std::vector<std::array<uint8_t, Kuznyechik::byte_block_size>> input_gamma_blocks128_ = { {
        {0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
        {0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01},
        {0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02},
        {0x12,0x34,0x56,0x78,0x90,0xab,0xce,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03}
    } };

    inline static const std::vector < std::array<uint8_t, Kuznyechik::byte_block_size>> output_gamma_blocks128_ = { {
        {0xe0,0xb7,0xeb,0xfa,0x94,0x68,0xa6,0xdb,0x2a,0x95,0x82,0x6e,0xfb,0x17,0x38,0x30},
        {0x85,0xff,0xc5,0x00,0xb2,0xf4,0x58,0x2a,0x7b,0xa5,0x4e,0x08,0xf0,0xab,0x21,0xee},
        {0xb4,0xc8,0xdb,0xcf,0xb3,0x53,0x19,0x5b,0x4c,0x42,0xcc,0x3d,0xdb,0x9b,0xa9,0xa5},
        {0xe9,0xa2,0xbe,0xe4,0x94,0x7b,0x32,0x2f,0x7b,0x7d,0x1d,0xb6,0xdf,0xb7,0xba,0x62}
    } };

    inline static const std::vector<uint8_t> cipher_flow128_ = {
            0xf1,0x95,0xd8,0xbe,0xc1,0x0e,0xd1,0xdb,0xd5,0x7b,0x5f,0xa2,0x40,0xbd,0xa1,0xb8,
            0x85,0xee,0xe7,0x33,0xf6,0xa1,0x3e,0x5d,0xf3,0x3c,0xe4,0xb3,0x3c,0x45,0xde,0xe4,
            0xa5,0xea,0xe8,0x8b,0xe6,0x35,0x6e,0xd3,0xd5,0xe8,0x77,0xf1,0x35,0x64,0xa3,0xa5,
            0xcb,0x91,0xfa,0xb1,0xf2,0x0c,0xba,0xb6,0xd1,0xc6,0xd1,0x58,0x20,0xbd,0xba,0x73
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks128_ = { {
        {0xf1,0x95,0xd8,0xbe,0xc1,0x0e,0xd1,0xdb,0xd5,0x7b,0x5f,0xa2,0x40,0xbd,0xa1,0xb8},
        {0x85,0xee,0xe7,0x33,0xf6,0xa1,0x3e,0x5d,0xf3,0x3c,0xe4,0xb3,0x3c,0x45,0xde,0xe4},
        {0xa5,0xea,0xe8,0x8b,0xe6,0x35,0x6e,0xd3,0xd5,0xe8,0x77,0xf1,0x35,0x64,0xa3,0xa5},
        {0xcb,0x91,0xfa,0xb1,0xf2,0x0c,0xba,0xb6,0xd1,0xc6,0xd1,0x58,0x20,0xbd,0xba,0x73}
    } };


    // 64-bit blocks
    static constexpr std::array<uint8_t, Magma::byte_block_size * 4> key64_ = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0xf0,
                                  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

    inline static const std::vector<uint8_t> iv64_ = { 0x12,0x34,0x56,0x78 };

    inline static const std::vector<uint8_t> plain_flow64_ = {
            0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59,
            0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20,
            0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c,
            0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41
    };

    inline static const std::vector < std::vector<uint8_t>> plain_blocks64_ = { {
        {0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59},
        {0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20},
        {0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c},
        {0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41}
    } };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> input_gamma_blocks64_ = {
        {0x12,0x34,0x56,0x78,0x00,0x00,0x00,0x00},
        {0x12,0x34,0x56,0x78,0x00,0x00,0x00,0x01},
        {0x12,0x34,0x56,0x78,0x00,0x00,0x00,0x02},
        {0x12,0x34,0x56,0x78,0x00,0x00,0x00,0x03}
    };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> output_gamma_blocks64_ = {
        {0xdc,0x46,0xe1,0x67,0xab,0xa4,0xb3,0x65},
        {0xe5,0x71,0xca,0x97,0x2e,0xf0,0xc0,0x49},
        {0x59,0xf5,0x7d,0xa6,0x60,0x1a,0xd9,0xa3},
        {0xdf,0x9c,0xf6,0x1b,0xbc,0xe7,0xdf,0x6c}
    };

    inline static const std::vector<uint8_t> cipher_flow64_ = {
            0x4e,0x98,0x11,0x0c,0x97,0xb7,0xb9,0x3c,
            0x3e,0x25,0x0d,0x93,0xd6,0xe8,0x5d,0x69,
            0x13,0x6d,0x86,0x88,0x07,0xb2,0xdb,0xef,
            0x56,0x8e,0xb6,0x80,0xab,0x52,0xa1,0x2d
    };

    inline static const std::vector < std::vector<uint8_t>> cipher_blocks64_ = {
        {0x4e,0x98,0x11,0x0c,0x97,0xb7,0xb9,0x3c},
        {0x3e,0x25,0x0d,0x93,0xd6,0xe8,0x5d,0x69},
        {0x13,0x6d,0x86,0x88,0x07,0xb2,0xdb,0xef},
        {0x56,0x8e,0xb6,0x80,0xab,0x52,0xa1,0x2d}
    };
};

#endif CRYPTOLIB_CTRTEST_H