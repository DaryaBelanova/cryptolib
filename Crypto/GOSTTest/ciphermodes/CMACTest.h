#ifndef CRYPTOLIB_CMACTEST_H
#define CRYPTOLIB_CMACTEST_H

#include "../../ReferenceImplementations/ciphermodes/CMAC.h"
#include "../../ReferenceImplementations/ciphersuite/Kuznyechik.h"
#include "../../ReferenceImplementations/ciphersuite/Magma.h"

class CMACTest {

public:

    CMACTest();

    void assert_k1_128();

    void assert_k2_128();

    void assert_update128();

    void assert_refresh128();

    void assert_finalize128();

    void assert_verify128();

    void assert_k1_64();

    void assert_k2_64();

    void assert_update64();

    void assert_finalize64();

    void assert_refresh64();

    void assert_verify64();

    void assert_all_functions();

private:

    Kuznyechik alg128_;
    Magma alg64_;

    CMAC<Kuznyechik> cmac128_;
    CMAC<Magma> cmac64_;

    // 128-bit blocks
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size * 2> key128_ = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };

    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> k1_128_ = { 0x29,0x7d,0x82,0xbc,0x4d,0x39,0xe3,0xca,0x0d,0xe0,0x57,0x32,0x98,0x15,0x1d,0xc7 };

    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> k2_128_ = { 0x52,0xfb,0x05,0x78,0x9a,0x73,0xc7,0x94,0x1b,0xc0,0xae,0x65,0x30,0x2a,0x3b,0x8e };
    
    static const size_t s128_ = 64;

    inline static const std::vector<uint8_t> plain_flow128_ = {
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88,
            0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,
            0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,
            0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11
    };

    inline static const std::vector<std::vector<uint8_t>> plain_blocks128_ = { {
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88},
        {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a},
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00},
        {0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xee,0xff,0x0a,0x00,0x11}
    } };

    inline static const std::vector<std::array<uint8_t, Kuznyechik::byte_block_size>> input_blocks128_ = { {
        {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88},
        {0x7f,0x76,0xbf,0xa3,0xfa,0xe9,0x42,0x47,0xd2,0xdf,0x27,0xf9,0x75,0x3a,0x12,0xc7},
        {0x0b,0xeb,0xea,0x32,0xad,0x50,0x41,0x7d,0xc3,0x43,0x54,0xfc,0xb0,0x83,0x9a,0xd2},
        {0x1e,0x2a,0x9c,0x1d,0x8c,0xc0,0x3b,0xfa,0x0c,0xb3,0x40,0x97,0x12,0x52,0xfe,0x24}
    } };

    inline static const std::vector < std::array<uint8_t, Kuznyechik::byte_block_size>> output_blocks128_ = { {
        {0x7f,0x67,0x9d,0x90,0xbe,0xbc,0x24,0x30,0x5a,0x46,0x8d,0x42,0xb9,0xd4,0xed,0xcd},
        {0x1a,0xc9,0xd9,0x76,0xf8,0x36,0x36,0xf5,0x5a,0xe9,0xef,0x30,0x5e,0x7c,0x90,0xd2},
        {0x15,0x64,0x5a,0xf4,0xa7,0x8e,0x50,0xa9,0xab,0xe8,0xdb,0x4b,0x75,0x4d,0xe3,0xf2},
        {0x33,0x6f,0x4d,0x29,0x60,0x59,0xfb,0xe3,0x4d,0xde,0xb3,0x5b,0x37,0x74,0x9c,0x67}
    } };

    inline static const std::vector<uint8_t> mac128_ = {
        0x33,0x6f,0x4d,0x29,0x60,0x59,0xfb,0xe3
    };


    // 64-bit blocks
    static constexpr std::array<uint8_t, Magma::byte_block_size * 4> key64_ = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0xf0,
                                  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

    static constexpr std::array<uint8_t, Magma::byte_block_size> k1_64_ = { 0x5f,0x45,0x9b,0x33,0x42,0x52,0x14,0x24 };

    static constexpr std::array<uint8_t, Magma::byte_block_size> k2_64_ = { 0xbe,0x8b,0x36,0x66,0x84,0xa4,0x28,0x48 };
    
    static const size_t s64_ = 32;
    
    inline static const std::vector<uint8_t> plain_flow64_ = {
            0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59,
            0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20,
            0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c,
            0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41
    };

    inline static const std::vector<std::vector<uint8_t>> plain_blocks64_ = { {
        {0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59},
        {0xdb,0x54,0xc7,0x04,0xf8,0x18,0x9d,0x20},
        {0x4a,0x98,0xfb,0x2e,0x67,0xa8,0x02,0x4c},
        {0x89,0x12,0x40,0x9b,0x17,0xb5,0x7e,0x41}
    } };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> input_blocks64_ = {
        {0x92,0xde,0xf0,0x6b,0x3c,0x13,0x0a,0x59},
        {0xf0,0x53,0xf8,0x00,0x6c,0xeb,0xef,0x80},
        {0x82,0x06,0x23,0x3a,0x9a,0xf6,0x1a,0xa5},
        {0x21,0x6e,0x6a,0x25,0x61,0xcf,0xf1,0x65}
    };

    inline static const std::vector<std::array<uint8_t, Magma::byte_block_size>> output_blocks64_ = {
        {0x2b,0x07,0x3f,0x04,0x94,0xf3,0x72,0xa0},
        {0xc8,0x9e,0xd8,0x14,0xfd,0x5e,0x18,0xe9},
        {0xf7,0x39,0xb1,0x8d,0x34,0x28,0x9b,0x00},
        {0x15,0x4e,0x72,0x10,0x20,0x30,0xc5,0xbb}
    };

    inline static const std::vector<uint8_t> mac64_ = {
        0x15,0x4e,0x72,0x10
    };
};

#endif CRYPTOLIB_CMACTEST_H