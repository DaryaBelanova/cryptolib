#ifndef CRYPTOLIB_KDFCMACTEST_H
#define CRYPTOLIB_KDFCMACTEST_H

#include "../../ReferenceImplementations/kdf/KDF.h"
#include "../../ReferenceImplementations/ciphermodes/CMAC.h"
#include "../../ReferenceImplementations/ciphersuite/Magma.h"

// According GOST P 71252-2024 only Magma is used in CRISP cryptographic suites, so only test cases for Magma present.

class KDFCMACTest {

public:

	KDFCMACTest();

	void assert_get_k_mac_magma_ctr_cmac();

	void assert_get_k_enc_magma_ctr_cmac();

	void assert_get_k_mac_magma_null_cmac();

	void assert_get_k_mac_magma_ctr_cmac8();

	void assert_get_k_enc_magma_ctr_cmac8();

	void assert_get_k_mac_magma_null_cmac8();

	void assert_all_functions();

private:

	KDF<CMAC<Magma>> kdf_cmac_;

	inline static const std::vector<uint8_t> label_macmac_ = { 0x6d,0x61,0x63,0x6d,0x61,0x63 };
	inline static const std::vector<uint8_t> label_macenc_ = { 0x6d,0x61,0x63,0x65,0x6e,0x63 };

	uint8_t CS1_ = 0x01;
	uint8_t CS2_ = 0x02;
	uint8_t CS3_ = 0x03;
	uint8_t CS4_ = 0x04;

	inline static const std::vector<uint8_t> seqNum1_3_ = { 0x0b,0x76,0xe6,0x73,0x60,0x01 };
	inline static const std::vector<uint8_t> seqNum2_4_ = { 0x0b,0x76,0xe6,0x6e,0xa0,0x01 };

	inline static const std::vector<uint8_t> sourceIdentifier_ = { 0x30,0x32,0x30,0x35,0x31,0x38,0x30,0x30,0x30,0x30,0x30,0x31 };

	uint16_t outputLength256_ = 256;
	uint16_t outputLength512_ = 512;


	static constexpr std::array<uint8_t, Magma::byte_block_size * 4> key_ = { 0x56,0x50,0x94,0x27,0x15,0x32,0x49,0x65,0x34,0x98,0x52,0x46,0x59,0x32,0x46,0x53,0x04,0x53,0x29,0x45,0x34,0x65,0x93,0x84,0x50,0x73,0x24,0x95,0x76,0x35,0x12,0x90 };

	inline static const std::vector<uint8_t> valid_k_mac_1_ = { 0xee,0xb0,0xf6,0x81,0x42,0x57,0xad,0x08,0x96,0x4e,0xab,0xe5,0xe0,0x99,0x3d,0x38,0xb2,0xaf,0xc2,0xad,0xa2,0x4e,0x83,0x62,0xd4,0x55,0xdb,0x06,0x95,0x1f,0x2d,0x93 };
	inline static const std::vector<uint8_t> valid_k_enc_1_ = { 0xe3,0x31,0x6a,0xd2,0x8c,0x78,0x8c,0x38,0xda,0xfd,0xeb,0x93,0x88,0xe2,0x34,0xbd,0x30,0xe5,0xc9,0x01,0xee,0xeb,0x17,0x88,0xcd,0xc1,0xec,0x5d,0xb3,0x15,0xe1,0xa7 };

	inline static const std::vector<uint8_t> valid_k_mac_2_ = { 0xc3,0xe3,0x78,0x0f,0x87,0xf2,0xca,0xf5,0x39,0xfd,0xad,0x56,0xd9,0xcb,0x03,0x40,0xb1,0x05,0x2c,0x0a,0xe8,0x27,0x2d,0xdc,0x96,0x01,0xc9,0x21,0xf8,0x1a,0x7c,0xa5 };

	inline static const std::vector<uint8_t> valid_k_mac_3_ = { 0x74,0x2a,0xe2,0xac,0xeb,0xae,0x5f,0xed,0x1c,0xc7,0xac,0xfd,0x61,0x4d,0x9c,0xf2,0x98,0xae,0xee,0xa7,0xa7,0x7a,0x99,0x7b,0xc1,0x9b,0x99,0xb9,0xbe,0xeb,0x88,0x32 };
	inline static const std::vector<uint8_t> valid_k_enc_3_ = { 0xc2,0x41,0xeb,0xfa,0xc4,0x9d,0x47,0x68,0x59,0xe1,0xe6,0x38,0x8a,0x94,0x66,0x0b,0x65,0xd6,0xb7,0x40,0xa3,0x83,0x63,0xab,0xb9,0x12,0x92,0x97,0x25,0x0d,0xdb,0x22 };

	inline static const std::vector<uint8_t> valid_k_mac_4_ = { 0x5d,0x48,0x85,0xa4,0x8e,0x3b,0xee,0x6f,0x79,0xa3,0xbd,0x09,0x9a,0xda,0x4f,0x68,0x21,0xdc,0xf8,0x16,0x91,0xd6,0x71,0x0a,0xf3,0x01,0x6c,0x85,0xae,0x06,0xeb,0xc4 };
};


#endif //CRYPTOLIB_KDFCMACTEST_H