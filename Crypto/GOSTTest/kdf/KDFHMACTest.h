#ifndef CRYPTOLIB_KDFHMACTEST_H
#define CRYPTOLIB_KDFHMACTEST_H

#include "../../src/kdf/KDF.h"

class KDFHMACTest {

public:

	KDFHMACTest();

	void assert_get_k1();

	void assert_get_k2();

	void assert_get_k_seq();

	void assert_all_functions();

private:

	KDF<HMAC256> kdf_hmac256_;

	static const uint8_t R_ = 1;

	static const uint64_t L_ = 512;

	inline static const std::vector<uint8_t> label_ = { 0x26,0xbd,0xb8,0x78 };

	inline static const std::vector<uint8_t> seed_ = { 0xaf,0x21,0x43,0x41,0x45,0x65,0x63,0x78 };

	inline static const std::vector<uint8_t> key_ = { 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f };

	inline static const std::vector<uint8_t> valid_k1_ = { 0x22,0xb6,0x83,0x78,0x45,0xc6,0xbe,0xf6,0x5e,0xa7,0x16,0x72,0xb2,0x65,0x83,0x10,0x86,0xd3,0xc7,0x6a,0xeb,0xe6,0xda,0xe9,0x1c,0xad,0x51,0xd8,0x3f,0x79,0xd1,0x6b };

	inline static const std::vector<uint8_t> valid_k2_ = { 0x07,0x4c,0x93,0x30,0x59,0x9d,0x7f,0x8d,0x71,0x2f,0xca,0x54,0x39,0x2f,0x4d,0xdd,0xe9,0x37,0x51,0x20,0x6b,0x35,0x84,0xc8,0xf4,0x3f,0x9e,0x6d,0xc5,0x15,0x31,0xf9 };

	inline static const std::vector<uint8_t> valid_k1_k2_ = {
		0x22,0xb6,0x83,0x78,0x45,0xc6,0xbe,0xf6,0x5e,0xa7,0x16,0x72,0xb2,0x65,0x83,0x10,0x86,0xd3,0xc7,0x6a,0xeb,0xe6,0xda,0xe9,0x1c,0xad,0x51,0xd8,0x3f,0x79,0xd1,0x6b,
		0x07,0x4c,0x93,0x30,0x59,0x9d,0x7f,0x8d,0x71,0x2f,0xca,0x54,0x39,0x2f,0x4d,0xdd,0xe9,0x37,0x51,0x20,0x6b,0x35,0x84,0xc8,0xf4,0x3f,0x9e,0x6d,0xc5,0x15,0x31,0xf9
	};
};


#endif //CRYPTOLIB_KDFHMACTEST_H