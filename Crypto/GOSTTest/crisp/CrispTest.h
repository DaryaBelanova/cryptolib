#ifndef CRYPTOLIB_CRISPTEST_H
#define CRYPTOLIB_CRISPTEST_H

#include <vector>
#include "../../src/crisp/CrispDriver.h"

class CrispTest {

public:

    CrispTest();

    void assert_cs1_msg_send();

    void assert_cs2_msg_send();

    void assert_cs3_msg_send();

    void assert_cs4_msg_send();

    void assert_cs1_msg_receive();

    void assert_cs2_msg_receive();

    void assert_cs3_msg_receive();

    void assert_cs4_msg_receive();

    void assert_all_functions();

private:

    CrispDriver crispDriver_;

    inline static const std::vector<uint8_t> key_ = { 0x56,0x50,0x94,0x27,0x15,0x32,0x49,0x65,0x34,0x98,0x52,0x46,0x59,0x32,0x46,0x53,0x04,0x53,0x29,0x45,0x34,0x65,0x93,0x84,0x50,0x73,0x24,0x95,0x76,0x35,0x12,0x90 };
    inline static const uint8_t cs1_ = 0x01;
    inline static const uint8_t cs2_ = 0x02;
    inline static const uint8_t cs3_ = 0x03;
    inline static const uint8_t cs4_ = 0x04;
    inline static const uint8_t externalKeyFlag_ = 1;
    inline static const uint8_t version_ = 0;
    inline static const std::vector<uint8_t> keyId_ = { 0x30 };
    inline static const std::vector<uint8_t> sourceId_ = { 0x30,0x32,0x30,0x35,0x31,0x38,0x30,0x30,0x30,0x30,0x30,0x31 };
    inline static const std::vector<uint8_t> seqNum_1_3_ = { 0x0b,0x76,0xe6,0x73,0x60,0x01 };
    inline static const std::vector<uint8_t> seqNum_2_4_ = { 0x0b,0x76,0xe6,0x6e,0xa0,0x01 };
    inline static const std::vector<uint8_t> payloadData_ = { 0x48,0x69,0x21,0x20,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x65,0x73,0x74,0x20,0x66,0x6f,0x72,0x20,0x43,0x52,0x49,0x53,0x50,0x20,0x6d,0x65,0x73,0x73,0x61,0x67,0x65,0x73,0x0a,0x03 };

    inline static const std::vector<uint8_t> crisp_msg_1_ = { 0x80,0x00,0x01,0x30,0x0b,0x76,0xe6,0x73,0x60,0x01,0xd3,0x24,0x64,0x3a,0xef,0xd9,0x7b,0x93,0xb1,0x8d,0x34,0x3a,0x2f,0xba,0x47,0x7e,0xc7,0x04,0xcd,0x8d,0x14,0xac,0x1c,0xf7,0x4c,0xeb,0x25,0x57,0x7a,0xf8,0xfc,0x2c,0x25,0xfa,0x90,0x50,0xa1,0x88,0x7f,0x0a,0x32 };
    inline static const std::vector<uint8_t> crisp_msg_2_ = { 0x80,0x00,0x02,0x30,0x0b,0x76,0xe6,0x6e,0xa0,0x01,0x48,0x69,0x21,0x20,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x65,0x73,0x74,0x20,0x66,0x6f,0x72,0x20,0x43,0x52,0x49,0x53,0x50,0x20,0x6d,0x65,0x73,0x73,0x61,0x67,0x65,0x73,0x0a,0x03,0xb9,0x7a,0xde,0x94 };
    inline static const std::vector<uint8_t> crisp_msg_3_ = { 0x80,0x00,0x03,0x30,0x0b,0x76,0xe6,0x73,0x60,0x01,0x9d,0xef,0x18,0xd7,0x05,0xaf,0xde,0x4e,0x00,0xed,0xb1,0x32,0xa8,0xb8,0xd4,0x80,0x18,0xff,0xe7,0x60,0xfd,0xd3,0x4c,0xec,0xd6,0x46,0x1c,0x35,0x53,0xc3,0x08,0x7c,0xd0,0x75,0x6f,0x15,0x69,0xed,0xf3,0x39,0xa0,0xdb,0xc0,0xb5,0xb7 };
    inline static const std::vector<uint8_t> crisp_msg_4_ = { 0x80,0x00,0x04,0x30,0x0b,0x76,0xe6,0x6e,0xa0,0x01,0x48,0x69,0x21,0x20,0x54,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x74,0x65,0x73,0x74,0x20,0x66,0x6f,0x72,0x20,0x43,0x52,0x49,0x53,0x50,0x20,0x6d,0x65,0x73,0x73,0x61,0x67,0x65,0x73,0x0a,0x03,0xf2,0x31,0x52,0x38,0x8e,0x61,0x58,0x25 };

};

#endif //CRYPTOLIB_CRISPTEST_H