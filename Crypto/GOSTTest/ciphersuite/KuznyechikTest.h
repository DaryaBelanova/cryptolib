#ifndef CRYPTOLIB_KUZNYECHIKTEST_H
#define CRYPTOLIB_KUZNYECHIKTEST_H

#include "../../src/ciphersuite/Kuznyechik.h"

class KuznyechikTest {

public:

    KuznyechikTest();

    void assert_S_transform() ;

    void assert_R_transform() ;

    void assert_L_transform() ;

    void assert_first_8_iter_consts();

    void assert_lsx_in_k_expand();

    void assert_kuz_k_expand() ;

    void assert_kuz_k_expand_step_by_step();

    void assert_kuz_encrypt() ;

    void assert_encrypt_step_by_step();

    void assert_kuz_decrypt() ;

    void assert_decrypt_step_by_step() ;

    void assert_all_functions() ;

private:

    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size * 2> key_ = {0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef};

    Kuznyechik kuznyechik_;

    static constexpr std::array<std::array<uint8_t, Kuznyechik::byte_block_size>, Kuznyechik::round_keys_count> kuznyechik_valid_iter_keys_ = {{
            {0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77},
            {0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
            {0xdb, 0x31, 0x48, 0x53, 0x15, 0x69, 0x43, 0x43, 0x22, 0x8d, 0x6a, 0xef, 0x8c, 0xc7, 0x8c, 0x44},
            {0x3d, 0x45, 0x53, 0xd8, 0xe9, 0xcf, 0xec, 0x68, 0x15, 0xeb, 0xad, 0xc4, 0x0a, 0x9f, 0xfd, 0x04},
            {0x57, 0x64, 0x64, 0x68, 0xc4, 0x4a, 0x5e, 0x28, 0xd3, 0xe5, 0x92, 0x46, 0xf4, 0x29, 0xf1, 0xac},
            {0xbd, 0x07, 0x94, 0x35, 0x16, 0x5c, 0x64, 0x32, 0xb5, 0x32, 0xe8, 0x28, 0x34, 0xda, 0x58, 0x1b},
            {0x51, 0xe6, 0x40, 0x75, 0x7e, 0x87, 0x45, 0xde, 0x70, 0x57, 0x27, 0x26, 0x5a, 0x00, 0x98, 0xb1},
            {0x5a, 0x79, 0x25, 0x01, 0x7b, 0x9f, 0xdd, 0x3e, 0xd7, 0x2a, 0x91, 0xa2, 0x22, 0x86, 0xf9, 0x84},
            {0xbb, 0x44, 0xe2, 0x53, 0x78, 0xc7, 0x31, 0x23, 0xa5, 0xf3, 0x2f, 0x73, 0xcd, 0xb6, 0xe5, 0x17},
            {0x72, 0xe9, 0xdd, 0x74, 0x16, 0xbc, 0xf4, 0x5b, 0x75, 0x5d, 0xba, 0xa8, 0x8e, 0x4a, 0x40, 0x43}
    }};

    // for S_transform method
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> S_input1 = {0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55,0x66, 0x77, 0x00};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> S_result1 = {0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> S_result2 = {0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> S_result3 = {0x0c, 0x33, 0x22, 0xfe, 0xd5, 0x31, 0xe4, 0x63, 0x0d, 0x80, 0xef, 0x5c, 0x5a, 0x81, 0xc5, 0x0b};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> S_result4 = {0x23, 0xae, 0x65, 0x63, 0x3f, 0x84, 0x2d, 0x29, 0xc5, 0xdf, 0x52, 0x9c, 0x13, 0xf5, 0xac, 0xda};

    // for R_transform method
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> R_input1 = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> R_result1 = {0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> R_result2 = {0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> R_result3 = {0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> R_result4 = {0x0d, 0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    // for L_transform
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> L_input1 = {0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> L_result1 = {0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> L_result2 = {0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> L_result3 = {0x0e, 0x93, 0x69, 0x1a, 0x0c, 0xfc, 0x60, 0x40, 0x8b, 0x7b, 0x68, 0xf6, 0x6b, 0x51, 0x3c, 0x13};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> L_result4 = {0xe6, 0xa8, 0x09, 0x4f, 0xee, 0x0a, 0xa2, 0x04, 0xfd, 0x97, 0xbc, 0xb0, 0xb4, 0x4b, 0x85, 0x80};

    // for LSX in k_expand
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> X_result_ = {0xe6, 0x3b, 0xdc, 0xc9, 0xa0, 0x95, 0x94, 0x47, 0x5d, 0x36, 0x9f, 0x23, 0x99, 0xd1, 0xf2, 0x76};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> SX_result_ = {0x09, 0x98, 0xca, 0x37, 0xa7, 0x94, 0x7a, 0xab, 0xb7, 0x8f, 0x4a, 0x5a, 0xe8, 0x1b, 0x74, 0x8a};
    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> LSX_result_ = {0x3d, 0x09, 0x40, 0x99, 0x9d, 0xb7, 0x5d, 0x6a, 0x92, 0x57, 0x07, 0x1d, 0x5e, 0x61, 0x44, 0xa6};

    // for step by step k_expand
    static constexpr std::array<std::array<uint8_t, Kuznyechik::byte_block_size>, 8> first_8_iter_consts_ = {
            {
                /* c1 = */{0x6e, 0xa2, 0x76, 0x72, 0x6c, 0x48, 0x7a, 0xb8, 0x5d, 0x27, 0xbd, 0x10, 0xdd, 0x84, 0x94, 0x01},
                /* c2 = */{0xdc, 0x87, 0xec, 0xe4, 0xd8, 0x90, 0xf4, 0xb3, 0xba, 0x4e, 0xb9, 0x20, 0x79, 0xcb, 0xeb, 0x02},
                /* c3 = */{0xb2, 0x25, 0x9a, 0x96, 0xb4, 0xd8, 0x8e, 0x0b, 0xe7, 0x69, 0x04, 0x30, 0xa4, 0x4f, 0x7f, 0x03},
                /* c4 = */{0x7b, 0xcd, 0x1b, 0x0b, 0x73, 0xe3, 0x2b, 0xa5, 0xb7, 0x9c, 0xb1, 0x40, 0xf2, 0x55, 0x15, 0x04},
                /* c5 = */{0x15, 0x6f, 0x6d, 0x79, 0x1f, 0xab, 0x51, 0x1d, 0xea, 0xbb, 0x0c, 0x50, 0x2f, 0xd1, 0x81,0x05},
                /* c6 = */{0xa7, 0x4a, 0xf7, 0xef, 0xab, 0x73, 0xdf, 0x16, 0x0d, 0xd2, 0x08, 0x60, 0x8b, 0x9e, 0xfe, 0x06},
                /* c7 = */{0xc9, 0xe8, 0x81, 0x9d, 0xc7, 0x3b, 0xa5, 0xae, 0x50, 0xf5, 0xb5, 0x70, 0x56, 0x1a, 0x6a, 0x07},
                /* c8 = */{0xf6, 0x59, 0x36, 0x16, 0xe6, 0x05, 0x56, 0x89, 0xad, 0xfb, 0xa1, 0x80, 0x27, 0xaa, 0x2a, 0x08}
            }
    };
    static constexpr std::array<std::array<uint8_t, Kuznyechik::byte_block_size>, 16> valid_expanded_keys_ = {
            {
                /*F[C1](k1)*/{0xc3, 0xd5, 0xfa, 0x01, 0xeb, 0xe3, 0x6f, 0x7a, 0x93, 0x74, 0x42, 0x7a, 0xd7, 0xca, 0x89, 0x49},
                /*F[C1](k2)*/{0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77},

                /*F[C2]F[C1](k1)*/{0x37, 0x77, 0x77, 0x48, 0xe5, 0x64, 0x53, 0x37, 0x7d, 0x5e, 0x26, 0x2d, 0x90, 0x90, 0x3f, 0x87},
                /*F[C2]F[C1](k2)*/{0xc3, 0xd5, 0xfa, 0x01, 0xeb, 0xe3, 0x6f, 0x7a, 0x93, 0x74, 0x42, 0x7a, 0xd7, 0xca, 0x89, 0x49},

                /*F[C3]...F[C1](k1)*/{0xf9, 0xea, 0xe5, 0xf2, 0x9b, 0x28, 0x15, 0xe3, 0x1f, 0x11, 0xac, 0x5d, 0x9c, 0x29, 0xfb, 0x01},
                /*F[C3]...F[C1](k2)*/{0x37, 0x77, 0x77, 0x48, 0xe5, 0x64, 0x53, 0x37, 0x7d, 0x5e, 0x26, 0x2d, 0x90, 0x90, 0x3f, 0x87},

                /*F[C4]...F[C1](k1)*/{0xe9, 0x80, 0x08, 0x96, 0x83, 0xd0, 0x0d, 0x4b, 0xe3, 0x7d, 0xd3, 0x43, 0x46, 0x99, 0xb9, 0x8f},
                /*F[C4]...F[C1](k1)*/{0xf9, 0xea, 0xe5, 0xf2, 0x9b, 0x28, 0x15, 0xe3, 0x1f, 0x11, 0xac, 0x5d, 0x9c, 0x29, 0xfb, 0x01},

                /*F[C5]...F[C1](k1)*/{0xb7, 0xbd, 0x70, 0xac, 0xea, 0x44, 0x60, 0x71, 0x4f, 0x4e, 0xbe, 0x13, 0x83, 0x5c, 0xf0, 0x04},
                /*F[C5]...F[C1](k1)*/{0xe9, 0x80, 0x08, 0x96, 0x83, 0xd0, 0x0d, 0x4b, 0xe3, 0x7d, 0xd3, 0x43, 0x46, 0x99, 0xb9, 0x8f},

                /*F[C6]...F[C1](k1)*/{0x1a, 0x46, 0xea, 0x1c, 0xf6, 0xcc, 0xd2, 0x36, 0x46, 0x72, 0x87, 0xdf, 0x93, 0xfd, 0xf9, 0x74},
                /*F[C6]...F[C1](k1)*/{0xb7, 0xbd, 0x70, 0xac, 0xea, 0x44, 0x60, 0x71, 0x4f, 0x4e, 0xbe, 0x13, 0x83, 0x5c, 0xf0, 0x04},

                /*F[C7]...F[C1](k1)*/{0x3d, 0x45, 0x53, 0xd8, 0xe9, 0xcf, 0xec, 0x68, 0x15, 0xeb, 0xad, 0xc4, 0x0a, 0x9f, 0xfd, 0x04},
                /*F[C7]...F[C1](k1)*/{0x1a, 0x46, 0xea, 0x1c, 0xf6, 0xcc, 0xd2, 0x36, 0x46, 0x72, 0x87, 0xdf, 0x93, 0xfd, 0xf9, 0x74},

                /*F[C8]...F[C1](k1)*/{0xdb, 0x31, 0x48, 0x53, 0x15, 0x69, 0x43, 0x43, 0x22, 0x8d, 0x6a, 0xef, 0x8c, 0xc7, 0x8c, 0x44},
                /*F[C8]...F[C1](k1)*/{0x3d, 0x45, 0x53, 0xd8, 0xe9, 0xcf, 0xec, 0x68, 0x15, 0xeb, 0xad, 0xc4, 0x0a, 0x9f, 0xfd, 0x04},
                }
    };

    // for encrypt step by step
    /*X[K1](a)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_X_ = {0x99, 0xbb, 0x99, 0xff, 0x99, 0xbb, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
    /*SX[K1](a)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_SX_ = {0xe8, 0x7d, 0xe8, 0xb6, 0xe8, 0x7d, 0xe8, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6};
    /*LSX[K1](a)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_first_LSX_ = {0xe2, 0x97, 0xb6, 0x86, 0xe3, 0x55, 0xb0, 0xa1, 0xcf, 0x4a, 0x2f, 0x92, 0x49, 0x14, 0x08, 0x30};
    static constexpr std::array<std::array<uint8_t, Kuznyechik::byte_block_size>, 8> valid_LSX_ = {
            {
                /*LSX[K2]LSX[K1](a)*/{0x28, 0x5e, 0x49, 0x7a, 0x08, 0x62, 0xd5, 0x96, 0xb3, 0x6f, 0x42, 0x58, 0xa1, 0xc6, 0x90, 0x72},
                /*LSX[K3]â€¦LSX[K1](a)*/{0x01, 0x87, 0xa3, 0xa4, 0x29, 0xb5, 0x67, 0x84, 0x1a, 0xd5, 0x0d, 0x29, 0x20, 0x7c, 0xc3, 0x4e},
                /*LSX[K4]â€¦LSX[K1](a)*/{0xec, 0x9b, 0xdb, 0xa0, 0x57, 0xd4, 0xf4, 0xd7, 0x7c, 0x5d, 0x70, 0x61, 0x9d, 0xca, 0xd2, 0x06},
                /*LSX[K5]â€¦X[K1](a))*/ {0x13, 0x57, 0xfd, 0x11, 0xde, 0x92, 0x57, 0x29, 0x0c, 0x2a, 0x14, 0x73, 0xeb, 0x6b, 0xcd, 0xe1},
                /*LSX[K6]â€¦LSX[K1](a)*/{0x28, 0xae, 0x31, 0xe7, 0xd4, 0xc2, 0x35, 0x42, 0x61, 0x02, 0x7e, 0xf0, 0xb3, 0x28, 0x97, 0xdf},
                /*LSX[K7]â€¦LSX[K1](a)*/{0x07, 0xe2, 0x23, 0xd5, 0x60, 0x02, 0xc0, 0x13, 0xd3, 0xf5, 0xe6, 0xf7, 0x14, 0xb8, 0x6d, 0x2d},
                /*LSX[K8]â€¦LSX[K1](a)*/{0xcd, 0x8e, 0xf6, 0xcd, 0x97, 0xe0, 0xe0, 0x92, 0xa8, 0xe4, 0xcc, 0xa6, 0x1b, 0x38, 0xbf, 0x65},
                /*LSX[K9]â€¦LSX[K1](a)*/{0x0d, 0x8e, 0x40, 0xe4, 0xa8, 0x00, 0xd0, 0x6b, 0x2f, 0x1b, 0x37, 0xea, 0x37, 0x9e, 0xad, 0x8e}
            }
    };

    // for decrypt step by step
    /*X[K10](b)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_X_inv_ = {0x0d, 0x8e, 0x40, 0xe4, 0xa8, 0x00, 0xd0, 0x6b, 0x2f, 0x1b, 0x37, 0xea, 0x37, 0x9e, 0xad, 0x8e};
    /*L^(-1)X[K10](b)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_L_inv_X_ = {0x8a, 0x6b, 0x93, 0x0a, 0x52, 0x21, 0x1b, 0x45, 0xc5, 0xba, 0xa4, 0x3f, 0xf8, 0xb9, 0x13, 0x19};
    /*S^(-1)L^(-1)X[K10](b)*/static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> valid_first_S_inv_L_inv_X_ = {0x76, 0xca, 0x14, 0x9e, 0xef, 0x27, 0xd1, 0xb1, 0x0d, 0x17, 0xe3, 0xd5, 0xd6, 0x8e, 0x5a, 0x72};
    static constexpr std::array<std::array<uint8_t, Kuznyechik::byte_block_size>, 8> valid_S_inv_L_inv_X_ = {
            {
                /*S^(-1)L^(-1)X[K9]...S^(-1)L^(-1)X[K10](b)*/{0x5d, 0x9b, 0x06, 0xd4, 0x1b, 0x9d, 0x1d, 0x2d, 0x04, 0xdf, 0x77, 0x55, 0x36, 0x3e, 0x94, 0xa9},
                /*S^(-1)L^(-1)X[K8]...S^(-1)L^(-1)X[K10](b)*/{0x79, 0x48, 0x71, 0x92, 0xaa, 0x45, 0x70, 0x9c, 0x11, 0x55, 0x59, 0xd6, 0xe9, 0x28, 0x0f, 0x6e},
                /*S^(-1)L^(-1)X[K7]...S^(-1)L^(-1)X[K10](b)*/{0xae, 0x50, 0x69, 0x24, 0xc8, 0xce, 0x33, 0x1b, 0xb9, 0x18, 0xfc, 0x5b, 0xdf, 0xb1, 0x95, 0xfa},
                /*S^(-1)L^(-1)X[K6]...S^(-1)L^(-1)X[K10](b)*/{0xbb, 0xff, 0xbf, 0xc8, 0x93, 0x9e, 0xaa, 0xff, 0xaf, 0xb8, 0xe2, 0x27, 0x69, 0xe3, 0x23, 0xaa},
                /*S^(-1)L^(-1)X[K5]...S^(-1)L^(-1)X[K10](b)*/{0x3c, 0xc2, 0xf0, 0x7c, 0xc0, 0x7a, 0x8b, 0xec, 0x0f, 0x3e, 0xa0, 0xed, 0x2a, 0xe3, 0x3e, 0x4a},
                /*S^(-1)L^(-1)X[K4]...S^(-1)L^(-1)X[K10](b)*/{0xf3, 0x6f, 0x01, 0x29, 0x1d, 0x0b, 0x96, 0xd5, 0x91, 0xe2, 0x28, 0xb7, 0x2d, 0x01, 0x1c, 0x36},
                /*S^(-1)L^(-1)X[K3]...S^(-1)L^(-1)X[K10](b)*/{0x1c, 0x4b, 0x0c, 0x1e, 0x95, 0x01, 0x82, 0xb1, 0xce, 0x69, 0x6a, 0xf5, 0xc0, 0xbf, 0xc5, 0xdf},
                /*S^(-1)L^(-1)X[K2]...S^(-1)L^(-1)X[K10](b)*/{0x99, 0xbb, 0x99, 0xff, 0x99, 0xbb, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
            }
    };

    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> a_ = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88};

    static constexpr std::array<uint8_t, Kuznyechik::byte_block_size> b_ = {0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30, 0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd};
};


#endif //CRYPTOLIB_KUZNYECHIKTEST_H
